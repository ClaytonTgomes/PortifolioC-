using System;
using System.Collections.Generic;
using System.Linq;

public class Carta
{
    public string Nome { get; set; }
    public int Vida { get; set; }
    public int AtkLeve { get; set; }
    public int AtkForte { get; set; }
    public int CustoAtkL { get; set; }
    public int CustoAtkF { get; set; }

    public Carta(string nome, int vida, int atkLeve, int atkForte, int custoAtkL, int custoAtkF)
    {
        Nome = nome;
        Vida = vida;
        AtkLeve = atkLeve;
        AtkForte = atkForte;
        CustoAtkL = custoAtkL;
        CustoAtkF = custoAtkF;
    }
}

class Program
{
    static void Main(string[] args)
    {
        // Criar uma listas de Cartas
        List<Carta> baralho = CriarBaralho();
        List<Carta> mao = new List<Carta>();
        List<Carta> campo = new List<Carta>();
        List<Carta> maoDois = new List<Carta>();
        List<Carta> campo2 = new List<Carta>();
		List<Carta> descarteJogador = new List<Carta>();
		List<Carta> descarteMaquina = new List<Carta>();

        Random dados = new Random();
        Carta cartaAtual;
        Carta cartaAtualMaq;
		Carta cartaAtual2;

        int descarte = 0;
		int descarte2 = 0;
        int custoATK1 = 0; //Valor que receberá da moeda1 jogador
        int custoATK2 = 0; //Valor que recebera da moeda2 maquina
		int custoATK3 = 0; //Valor que receberá  da moeda2 jogador2
        int moeda1 = 0; //Valor que recebera sortido de random jogador
        int moeda2 = 0; //Valor que receberá sortido de random maquina
		int moeda3 = 0;
        int custAtkL1;
        int custAtkF1;
        int custAtkL2;
        int custAtkF2;
		int custAtkL3;
		int custAtkF3;
		int escolha;
        bool situaçãoJogo = true;
        bool situacaoFase = true;
		bool JogadorVersus = false;
		bool MaquinaVersus = false;
		string nomeJogador1;
		string nomeJogador2 = "Rival";

        //Embaralhar Lista
        baralho = Embaralhar(baralho);

        static List<Carta> Embaralhar(List<Carta> baralho)
        {
            Random random = new Random();
            int n = baralho.Count;
            while (n > 1)
            {
                int k = random.Next(n);
                n--;
                Carta carta = baralho[k];
                baralho[k] = baralho[n];
                baralho[n] = carta;
            }
            return baralho;
        }

        static List<Carta> CriarBaralho()
        {
            List<Carta> baralho = new List<Carta>();
            //Adicionar as cartas ao baralho
            baralho.Add(new Carta("Pikachu", 80, 30, 60, 2, 3));
            baralho.Add(new Carta("Charmander", 70, 20, 40, 1, 3));
            baralho.Add(new Carta("Squirtle", 60, 10, 30, 1, 2));
            baralho.Add(new Carta("Bulbasaur", 70, 20, 30, 1, 2));
            baralho.Add(new Carta("Mew", 180, 40, 70, 2, 4));
            baralho.Add(new Carta("Onix", 90, 20, 100, 1, 5));
            baralho.Add(new Carta("Lapras", 190, 100, 160, 5, 7));
            baralho.Add(new Carta("Arceus", 280, 120, 220, 5, 8));
            baralho.Add(new Carta("Charizard", 220, 80, 190, 4, 7));
            baralho.Add(new Carta("Venusaur", 160, 50, 90, 3, 4));
            baralho.Add(new Carta("Rayquaza", 90, 30, 100, 2, 5));
            baralho.Add(new Carta("Lugia", 90, 40, 90, 2, 4));
            baralho.Add(new Carta("Xerneas", 170, 60, 140, 3, 6));
            baralho.Add(new Carta("Zaptos", 90, 60, 100, 3, 5));
            baralho.Add(new Carta("Moltres", 120, 30, 90, 2, 4));
            baralho.Add(new Carta("Articuno", 110, 20, 100, 1, 5));
            baralho.Add(new Carta("Charmeleon", 90, 30, 100, 2, 5));
            baralho.Add(new Carta("Ivysaur", 100, 30, 80, 2, 4));
            baralho.Add(new Carta("Mewtwo", 230, 80, 170, 4, 7));
            baralho.Add(new Carta("Wartotle", 70, 30, 70, 2, 4));
            baralho.Add(new Carta("Ho-Oh", 190, 100, 180, 5, 7));
            baralho.Add(new Carta("Entei", 250, 100, 260, 5, 9));

            return baralho;
        }

        void Baralho()
        {
            Console.WriteLine("CARTAS DO BARALHO");
            Console.WriteLine("Nome  = ♡ Vida | (♤ AtkL-E / ♤ AtkF-E)");
			Console.WriteLine();
            foreach (Carta deck in baralho)
            {
                Console.WriteLine($"{deck.Nome} = ♡ {deck.Vida} | (♤ {deck.AtkLeve}-{deck.CustoAtkL}  /  ♧ {deck.AtkForte}-{deck.CustoAtkF})");
            }
        }

        // Criar a impressão das cartas na lista mao
        void Mao()
        {
            int i = 0;
            Console.WriteLine("Mochila do " + nomeJogador1);
            Console.WriteLine("N°-> Nome  = ♡ Vida | (♤ AtkL-E / ♤ AtkF-E)");
            foreach (Carta carta in mao)
            {
                Console.WriteLine($"{i} -> {carta.Nome} =  ♡ {carta.Vida} | (♤ {carta.AtkLeve}-{carta.CustoAtkL}  / ♧ {carta.AtkForte}-{carta.CustoAtkF})");
                i++;
            }
        }
		
		void Mao3()
        {
            int i = 0;
            Console.WriteLine("Mochila do " + nomeJogador2);
            Console.WriteLine("N°-> Nome  = ♡ Vida | (♤ AtkL-E / ♤ AtkF-E)");
            foreach (Carta carta3 in maoDois)
            {
                Console.WriteLine($"{i} -> {carta3.Nome} =  ♡ {carta3.Vida} | (♤ {carta3.AtkLeve}-{carta3.CustoAtkL}  / ♧ {carta3.AtkForte}-{carta3.CustoAtkF})");
                i++;
            }
        }

        void Mao2()
        {
            int i = 0;
            Console.WriteLine("MÃO DA MAQUINA");
            foreach (Carta carta2 in maoDois)
            {
                Console.WriteLine($"{carta2.Nome} = {carta2.Vida} ( {carta2.AtkLeve} - {carta2.CustoAtkL}  / {carta2.AtkForte} - {carta2.CustoAtkF} )");
                i++;
            }
        }

        void RodarDadosJogador()
        {
            moeda1 = dados.Next(1, 3);
            Console.WriteLine(nomeJogador1 + " pegou: " + moeda1 + " de ENERGIA");
        }
		
		void RodarDadosJogador2()
        {
            moeda3 = dados.Next(1, 3);
            Console.WriteLine(nomeJogador2 + " pegou: " + moeda3 + " de ENERGIA");
        }

        void RodarDadosMaquina()
        {
            moeda2 = dados.Next(1, 3);
            Console.WriteLine("Maquina pegou: " + moeda2 + " de ENERGIA");
        }

        void Campo()
        {
            Console.ForegroundColor = ConsoleColor.Cyan;
            Console.WriteLine("\t\t\t\t\t\t\tCAMPO");
            Console.WriteLine("=================================================");
			Console.ResetColor();
			Console.ForegroundColor = ConsoleColor.Green;
			Console.WriteLine("Pokemons nocauteados: " + descarteJogador.Count);
            Console.WriteLine("Quantidade de Energia: " + custoATK1);
            Console.WriteLine("\t\t\t\t Pokemon ativo de " + nomeJogador1);
			Console.WriteLine();
            foreach (Carta jogada1 in campo)
            {
                Console.WriteLine($"\t\t{jogada1.Nome} = ♡ {jogada1.Vida} | (♤ {jogada1.AtkLeve}-{jogada1.CustoAtkL}  / ♧ {jogada1.AtkForte}-{jogada1.CustoAtkF})");
            }
            Console.WriteLine();
			Console.ResetColor();
			Console.ForegroundColor = ConsoleColor.Cyan;
            Console.WriteLine("                    -------                      ");
            Console.WriteLine("-------------------|   O   |---------------------");
            Console.WriteLine("                    -------                      ");
			Console.ResetColor();
            Console.WriteLine();
			if(MaquinaVersus == true)
			{
                Console.ForegroundColor = ConsoleColor.Magenta;
                foreach (Carta jogada2 in campo2)
                {
                    Console.WriteLine($"\t\t{jogada2.Nome} = ♡ {jogada2.Vida} | (♤ {jogada2.AtkLeve}-{jogada2.CustoAtkL}  / ♧ {jogada2.AtkForte}-{jogada2.CustoAtkF})");
                }
		    	Console.WriteLine();
                Console.WriteLine("\t\t\t\t Pokemon ativo da Maquina");
                Console.WriteLine("Total de Energia: " + custoATK2);
		    	Console.WriteLine("Pokemons nocauteados: " + descarteMaquina.Count);
		    	Console.ResetColor();
            }
			else if(JogadorVersus == true)
			{
                Console.ForegroundColor = ConsoleColor.Yellow;
                foreach (Carta jogada3 in campo2)
                {
                    Console.WriteLine($"\t\t{jogada3.Nome} = ♡ {jogada3.Vida} | (♤ {jogada3.AtkLeve}-{jogada3.CustoAtkL}  / ♧ {jogada3.AtkForte}-{jogada3.CustoAtkF})");
                }
		    	Console.WriteLine();
                Console.WriteLine("\t\t\t\t Pokemon ativo de " + nomeJogador2);
                Console.WriteLine("Quantidade de Energia: " + custoATK3);
		    	Console.WriteLine("Pokemons nocauteados: " + descarteMaquina.Count);
		    	Console.ResetColor();
            }
            
			Console.ForegroundColor = ConsoleColor.Cyan;
            Console.WriteLine("=================================================");
			Console.WriteLine();
			Console.ResetColor();
        }

        void DistribuirCartasJogador()
        {
            for (int i = 0; i < 3; i++)
            {
                int posicao = 0;
                mao.Add(baralho[posicao]);
				baralho.RemoveAt(posicao);
            }
        }

        void DistribuirCartasJogador2()
        {
            for (int i = 0; i < 3; i++)
            {
                int posicao2 = 0;
                maoDois.Add(baralho[posicao2]);
				baralho.RemoveAt(posicao2);
            }
        }

        void VerificarCampoJogador()
        {
            if (campo.Count == 0)
            {
                Mao();
                Console.WriteLine();
                Console.WriteLine(nomeJogador1 + " escolha se Pokemon");
				while (!int.TryParse(Console.ReadLine(), out descarte) || (descarte != 0 && descarte != 1 && descarte != 2))
                {
                    Console.WriteLine("Escolha inválida. Por favor, escolha novamente:");
                }
                campo.Add(mao[descarte]);
                mao.RemoveAt(descarte);
			    mao.Add(baralho[0]);
                baralho.RemoveAt(0);
            }
        }
		
		void VerificarCampoJogador2()
        {
            if (campo2.Count == 0)
            {
                Mao3();
                Console.WriteLine();
                Console.WriteLine(nomeJogador2 + " escolha seu Pokemon");
                while (!int.TryParse(Console.ReadLine(), out descarte2) || (descarte2 != 0 && descarte2 != 1 && descarte2 != 2))
                {
                    Console.WriteLine("Escolha inválida. Por favor, escolha novamente:");
                }
                campo2.Add(maoDois[descarte2]);
                maoDois.RemoveAt(descarte2);
			    maoDois.Add(baralho[0]);
                baralho.RemoveAt(0);
            }
        }
		
		void VerificarCampoMaquina()
		{
            Random escMaq = new Random();
			int position = escMaq.Next(3);
            if (campo2.Count == 0)
            {
                campo2.Add(maoDois[position]);
                maoDois.RemoveAt(position);
				maoDois.Add(baralho[0]);
                baralho.RemoveAt(0);
            }
        }

        void VerificarAtaque()
        {
            Console.ForegroundColor = ConsoleColor.Green;
            custAtkL1 = cartaAtual.CustoAtkL;
            custAtkF1 = cartaAtual.CustoAtkF;

            if (custoATK1 >= custAtkL1)
            {
                Console.WriteLine("Você tem energia para atacar " + nomeJogador1);
                Console.WriteLine("Vai atacar? S ou N");
				char atacar;
                while (!char.TryParse(Console.ReadLine(), out atacar) || (atacar != 's' && atacar != 'S' && atacar != 'n' && atacar != 'N'))
                {
                    Console.WriteLine("Escolha inválida. Por favor, escolha novamente:");
                }
                if (atacar == 's' || atacar == 'S')
                {
                    Console.WriteLine("Ataque leve ou forte? L ou F");
                    while (!char.TryParse(Console.ReadLine(), out atacar) || (atacar != 'l' && atacar != 'L' && atacar != 'f' && atacar != 'F'))
                    {
                        Console.WriteLine("Escolha inválida. Por favor, escolha novamente:");
                    }
                    if (atacar == 'l' || atacar == 'L')
                    {
                        Console.WriteLine();
                        cartaAtualMaq.Vida -= cartaAtual.AtkLeve;
                        custoATK1 -= 3;
						if (custoATK1 < 0)
                        {
                            custoATK1 = 0;
                        }
						if(JogadorVersus == true)
						{
                            if(cartaAtual2.Vida <= 0)
							{
                                custoATK3 = 0;
                            }
                         }
					    else if(MaquinaVersus == true)
					    {
                            if(cartaAtualMaq.Vida <= 0)
							{
                                custoATK2 = 0;
                            }
                        }
                        Console.WriteLine(cartaAtual.Nome + " Atacou com o Leve o Pokemon " + cartaAtualMaq.Nome);
                        Console.WriteLine("Dano de ataque foi de " + cartaAtual.AtkLeve + " do pokemon " + cartaAtual.Nome);
                        Console.WriteLine("Vitalidade do Pokemon " + cartaAtualMaq.Nome + " atual é de " + cartaAtualMaq.Vida);
                    }
                    else if (atacar == 'f' || atacar == 'F')
                    {
                        if (custoATK1 >= custAtkF1)
                        {
                            Console.WriteLine();
                            cartaAtualMaq.Vida -= cartaAtual.AtkForte;
                            custoATK1 -= cartaAtual.CustoAtkF;
                            if (custoATK1 < 0)
                            {
                                custoATK1 = 0;
                            }
							if(JogadorVersus == true)
							{
                                if(cartaAtual2.Vida <= 0)
							    {
                                    custoATK3 = 0;
                                }
                            }
							else if(MaquinaVersus == true)
						    {
                                if(cartaAtualMaq.Vida <= 0)
								{
                                    custoATK2 = 0;
                                }
                            }
                            Console.WriteLine(cartaAtual.Nome + " Atacou com Forte o Pokemon " + cartaAtualMaq.Nome);
                            Console.WriteLine("Dano de " + cartaAtual.AtkForte + " do pokemon " + cartaAtual.Nome);
                            Console.WriteLine("Vitalidade do Pokemon " + cartaAtualMaq.Nome + " agora é de " + cartaAtualMaq.Vida);
                        }
                        else
                        {
                            Console.WriteLine("Você nãotem energia Para ataque Forte " + nomeJogador1);
                        }
                    }
                }
                else
                {
                    Console.WriteLine(nomeJogador1 + " decidiu não atacar");
                }
            }
			else
            {
                Console.WriteLine(nomeJogador1 + " com Energia insuficiente");
            }
			Console.ResetColor();
        }
		
		void VerificarAtaqueJogador2()
        {
            Console.ForegroundColor = ConsoleColor.Yellow;
            custAtkL3 = cartaAtual2.CustoAtkL;
            custAtkF3 = cartaAtual2.CustoAtkF;
			
            if (custoATK3 >= custAtkL3)
            {
                Console.WriteLine(nomeJogador2 + " ja tem energia para atacar");
                Console.WriteLine("Vai atacar? S ou N");
                char atacar2;
                while (!char.TryParse(Console.ReadLine(), out atacar2) || (atacar2 != 's' && atacar2 != 'S' && atacar2 != 'n' && atacar2 != 'N'))
                {
                    Console.WriteLine("Escolha inválida. Por favor, escolha novamente:");
                }
                if (atacar2 == 's' || atacar2 == 'S')
                {
                    Console.WriteLine("Ataque leve ou forte? L ou F");
					while (!char.TryParse(Console.ReadLine(), out atacar2) || (atacar2 != 'l' && atacar2 != 'L' && atacar2 != 'f' && atacar2 != 'F'))
                    {
                        Console.WriteLine("Escolha inválida. Por favor, escolha novamente:");
                    }                
                    if (atacar2 == 'l' || atacar2 == 'L')
                    {
                        Console.WriteLine();
                        cartaAtual.Vida -= cartaAtual2.AtkLeve;
                        custoATK3 -= 3;
						if (custoATK3 < 0)
                        {
                            custoATK3 = 0;
                        }
						if(cartaAtual.Vida <= 0)
						{
                            custoATK1 = 0;
                        }
                        Console.WriteLine(cartaAtual2.Nome + " Atacou com o Leve o Pokemon " + cartaAtual.Nome);
                        Console.WriteLine("Dano de ataque foi de " + cartaAtual2.AtkLeve + " do pokemon " + cartaAtual2.Nome);
                        Console.WriteLine("Vida Pokemon " + cartaAtual.Nome + " agora é de " + cartaAtual.Vida);
                    }
                    else if (atacar2 == 'f' || atacar2 == 'F')
                    {
                        if (custoATK3 >= custAtkF3)
                        {
                            Console.WriteLine();
                            cartaAtual.Vida -= cartaAtual2.AtkForte;
                            custoATK3 -= cartaAtual2.CustoAtkF;
                            if (custoATK3 < 0)
                            {
                                custoATK3 = 0;
                            }
							if(cartaAtual.Vida <= 0)
							{
                                custoATK1 = 0;
                            }
                            Console.WriteLine(cartaAtual2.Nome + " fez ataque Forte, contra o Pokemon " + cartaAtual.Nome);
                            Console.WriteLine("Dano de " + cartaAtual2.AtkForte + " do pokemon " + cartaAtual2.Nome);
                            Console.WriteLine("Vitalidade atual do Pokemon " + cartaAtual.Nome + " agora é de " + cartaAtual.Vida);
                        }
                        else
                        {
                            Console.WriteLine("Você não tem energia Para ataque Forte " + nomeJogador2);
                        }
                    }
                }
                else
                {
                    Console.WriteLine(nomeJogador2 + " não fez o ataque");
                }
            }
			else
            {
                Console.WriteLine(nomeJogador2 + " com Energia insuficiente");
            }
			Console.ResetColor();
        }

        void VerificarAtaqueMaquina()
        {
            Console.ForegroundColor = ConsoleColor.Magenta;
            custAtkL2 = cartaAtualMaq.CustoAtkL;
            custAtkF2 = cartaAtualMaq.CustoAtkF;
            if (campo.Count > 0)
            {
                if (custoATK2 >= cartaAtualMaq.CustoAtkF)
                {
                    cartaAtual.Vida -= cartaAtualMaq.AtkForte;
                    custoATK2 -= cartaAtualMaq.CustoAtkF;
                    if (custoATK2 < 0)
                    {
                        custoATK2 = 0;
                    }
					if(cartaAtual.Vida <= 0)
				    {
                        custoATK1 = 0;
                    }
                    Console.WriteLine(cartaAtualMaq.Nome + " atacou Forte, contra o Pokemon " + cartaAtual.Nome);
                    Console.WriteLine("Dano de " + cartaAtualMaq.AtkForte + " do Pokemon " + cartaAtualMaq.Nome);
                    Console.WriteLine("Vitalidade do Pokemon " + cartaAtual.Nome + " agora é de " + cartaAtual.Vida);
                }		
                else if (custoATK2 >= cartaAtualMaq.CustoAtkL)
                {
                    Random rnd = new Random();
                    int decidAtacar = rnd.Next(2);
                    if(cartaAtual.Vida <= cartaAtualMaq.AtkLeve)
					{
                        cartaAtual.Vida -= cartaAtualMaq.AtkLeve;
                        custoATK2 -= 3;
						if (custoATK2 < 0)
                        {
                            custoATK2 = 0;
                        }
						if(cartaAtual.Vida <= 0)
						{	
                            custoATK1 = 0;
                        }
                        Console.WriteLine(cartaAtualMaq.Nome + " atacou Leve, contra o Pokemon " + cartaAtual.Nome);
                        Console.WriteLine("Dano de " + cartaAtualMaq.AtkLeve + " do pokemon " + cartaAtualMaq.Nome);
                        Console.WriteLine("Vitalidade do Pokemon " + cartaAtual.Nome + " agora é de " + cartaAtual.Vida);
                    }
                    else if (decidAtacar == 0)
                    {
                        Console.WriteLine("Maquina decidiu não atacar");
                    }
                    else
                    {
                        cartaAtual.Vida -= cartaAtualMaq.AtkLeve;
                        custoATK2 -= 3;
						if (custoATK2 < 0)
                        {
                            custoATK2 = 0;
                        }
						if(cartaAtual.Vida <= 0)
						{	
                            custoATK1 = 0;
                        }
                        Console.WriteLine(cartaAtualMaq.Nome + " atacou Leve, contra o Pokemon " + cartaAtual.Nome);
                        Console.WriteLine("Dano de " + cartaAtualMaq.AtkLeve + " do pokemon " + cartaAtualMaq.Nome);
                        Console.WriteLine("Vitalidade do Pokemon " + cartaAtual.Nome + " agora é de " + cartaAtual.Vida);
                    }
                }
                else
                {
                    Console.WriteLine("Máquina não tem Energia suficiente");
                }
            }
			Console.ResetColor();
        }

        void PercaPokemonJogador()
        {
            if (cartaAtual.Vida <= 0)
            {
                Console.WriteLine("O Pokemon " + cartaAtual.Nome + " de " + nomeJogador1 + " foi Nocauteado");
				descarteJogador.Add(campo[0]);
                campo.RemoveAt(0);
				custoATK1 = 0;
            }
        }
		
		void PercaPokemonJogador2()
        {
            if (cartaAtual2.Vida <= 0)
            {
                Console.WriteLine("O Pokemon " + cartaAtual2.Nome + " de " + nomeJogador2 + " foi Nocauteado");
				descarteMaquina.Add(campo2[0]);
                campo2.RemoveAt(0);
				custoATK3 = 0;
            }
        }

        void PercaPokemonMaquina()
        {

            if (cartaAtualMaq.Vida <= 0)
            {
                Console.WriteLine("O Pokemon " + cartaAtualMaq.Nome + " da Maquina, foi Nocauteado");
				descarteMaquina.Add(campo2[0]);
                campo2.RemoveAt(0);
				custoATK2 = 0;
            }
        }

        void VerificarVitoriaJogador()
        {
            if (descarteMaquina.Count == 3)
            {
                Console.WriteLine();
                Console.WriteLine("PARABENS, " + nomeJogador1 +" Ganhou o jogo");
				Console.WriteLine();
				Console.WriteLine("Você recebeu a Insignia Senac ☆☆☆");
                situaçãoJogo = false;
            }
            
        }
		
		void VerificarVitoriaJogador2()
        {
            if (descarteJogador.Count == 3)
            {
                Console.WriteLine();
                Console.WriteLine("PARABENS, " + nomeJogador2 +" Ganhou o jogo");
				Console.WriteLine();
				Console.WriteLine("Você recebeu a Insignia Senac ☆☆☆");
                situaçãoJogo = false;
            }
            
        }
		
		void VerificarVitoriaMaquina()
		{
            if (descarteJogador.Count == 3)
            {
                Console.WriteLine();
                Console.WriteLine("MAQUINA Ganhou o jogo");
				Console.WriteLine();
				Console.Write("Que pena, você não conseguiu a Insignia!");
                situaçãoJogo = false;
            }
        }
		
		Console.WriteLine("#################################################");
		Console.WriteLine("          BEM VINDO AO POKEMON STADIUM           ");
		Console.WriteLine("#################################################");
		Console.WriteLine();
		Console.WriteLine("Qual o seu nome?");
		nomeJogador1 = Console.ReadLine();
		while(nomeJogador1 == "" || nomeJogador1 == " ")
		{
            Console.WriteLine("Campo vazio, tente novamente");
			nomeJogador1 = Console.ReadLine();
        }
		Console.WriteLine();
		Console.WriteLine(nomeJogador1 + " Quer jogar contra um amigo ou maquina?");
		Console.WriteLine("1 - Amigo");
		Console.WriteLine("2 - Maquina");
		while (!int.TryParse(Console.ReadLine(), out escolha) || (escolha != 1 && escolha != 2))
        {
            Console.WriteLine("Escolha inválida. Por favor, escolha novamente:");
        }
		if(escolha == 1)
		{
            JogadorVersus = true;
			MaquinaVersus = false;
			Console.WriteLine();
			Console.WriteLine("E qual é o nome do amigo?");
			nomeJogador2 = Console.ReadLine();
			while(nomeJogador2 == "" || nomeJogador2 == " ")
		    {
                Console.WriteLine("Campo vazio, tente novamente");
			    nomeJogador2 = Console.ReadLine();
            }
        }
		else if(escolha == 2)
		{
            MaquinaVersus = true;
			JogadorVersus = false;
		}
		Console.WriteLine();
		Console.WriteLine("Legal, escolham seus Pokemons para batalharem");
		Console.WriteLine("Aperte ENTER");
		Console.ReadLine();
		Console.Clear();
		
        Campo();
        Console.WriteLine();
		DistribuirCartasJogador();
		DistribuirCartasJogador2();
        VerificarCampoJogador();
		Console.Clear();
		Campo();
		
		if(MaquinaVersus == true)
		{
            VerificarCampoMaquina();		
        }
		else if(JogadorVersus == true)
		{
            VerificarCampoJogador2();
        }
		
		Console.WriteLine();
        Console.WriteLine("Aperte ENTER para continuar");
        Console.ReadLine();
        Console.Clear();
	
        //Controle Geral do Jogo
        while (situaçãoJogo == true)
        {
            cartaAtual = campo[0];
            cartaAtualMaq = campo2[0];
            cartaAtual2 = campo2[0];
            //Turno jogador
            while (true)
            {
                Console.ForegroundColor = ConsoleColor.Green;
                Console.WriteLine("########## Vez do " + nomeJogador1 + " ############");
				Console.ResetColor();
                RodarDadosJogador();
                custoATK1 += moeda1;
                Console.WriteLine();
                Campo();
                VerificarAtaque();
				if(JogadorVersus == true)
				{
                    PercaPokemonJogador2();
                }
				else if(MaquinaVersus == true)
				{
                    PercaPokemonMaquina();
                }
				
				Console.WriteLine("Aperte ENTER para continuar");
                Console.ReadLine();
                Console.Clear();
				Console.ForegroundColor = ConsoleColor.Green;
			    Console.WriteLine("########## Vez do " + nomeJogador1 + " ############");
                Console.WriteLine("xxxxxxxxxxxx  Campo Atualizado  xxxxxxxxxxxxxxxx");
				Console.ResetColor();
				Console.WriteLine();
                Campo();
                VerificarVitoriaJogador();
                if (situaçãoJogo == false)
                {
                    break;
                }
				if(JogadorVersus == true)
				{
                    VerificarCampoJogador2();
					cartaAtual2 = campo2[0];
                }
				else if(MaquinaVersus == true)
				{	
                    VerificarCampoMaquina();
					cartaAtualMaq = campo2[0];
                }
                situacaoFase = false;
                if (situacaoFase == false)
                {
                    break;
                }
            }

            if (situaçãoJogo == false)
            {
                break;
            }
			
            Console.WriteLine("Aperte ENTER para passar a vez");
            Console.ReadLine();
            Console.Clear();

            //Turno Maquina
            while (MaquinaVersus == true)
            {
                Console.ForegroundColor = ConsoleColor.Magenta;
                Console.WriteLine("################ VEZ DA MAQUINA #################");
				Console.ResetColor();
                RodarDadosMaquina();
                custoATK2 += moeda2;
                Console.WriteLine();
                Campo();
                Console.WriteLine();
                VerificarAtaqueMaquina();
                PercaPokemonJogador();
				
				Console.WriteLine("Aperte ENTER para continuar");
                Console.ReadLine();
                Console.Clear();
				Console.ForegroundColor = ConsoleColor.Magenta;
				Console.WriteLine("################ VEZ DA MAQUINA #################");
                Console.WriteLine("xxxxxxxxxxxx  Campo Atualizado  xxxxxxxxxxxxxxxx");
				Console.ResetColor();
				Console.WriteLine();
                Campo();
                VerificarVitoriaMaquina();
                if (situaçãoJogo == false)
                {
                    break;
                }
                VerificarCampoJogador();
				cartaAtual = campo[0];
                situacaoFase = false;
                if (situacaoFase == false)
                {
                    break;
                }
            }
			
			//Turno Jogador 2
            while (JogadorVersus == true)
            {
                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.WriteLine("########### Vez de " + nomeJogador2 + " ###############");
				Console.ResetColor();
                RodarDadosJogador2();
                custoATK3 += moeda3;
                Console.WriteLine();
                Campo();
                VerificarAtaqueJogador2();
                PercaPokemonJogador();
				Console.WriteLine("Aperte ENTER para continuar");
                Console.ReadLine();
                Console.Clear();
				Console.ForegroundColor = ConsoleColor.Yellow;
				Console.WriteLine("########### Vez de " + nomeJogador2 + " ###############");
                Console.WriteLine("xxxxxxxxxxxx  Campo Atualizado  xxxxxxxxxxxxxxxx");
				Console.ResetColor();
				Console.WriteLine();
                Campo();
                VerificarVitoriaJogador2();
                if (situaçãoJogo == false)
                {
                    break;
                }
                VerificarCampoJogador();
				cartaAtual = campo[0];
                situacaoFase = false;
                if (situacaoFase == false)
                {
                    break;
                }
            }
			if (situaçãoJogo == false)
            {
                break;
            }
            Console.WriteLine("Aperte ENTER para sua vez");
            Console.ReadLine();
            Console.Clear();
        }
    }
}
